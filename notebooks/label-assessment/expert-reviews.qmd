---
title: "Analyzing Reviews of Labelling Assignments by the Expert Team"
format: html
editor: visual
toc: true
toc-depth: 5
execute: 
  message: false
  warning: false
number-sections: true
date: today
---

```{r}
#| echo: false
#| message: false

library(dplyr)
library(ggplot2)
library(sf)
library(patchwork)
library(knitr)
```

Each expert reviewed several thousand site mapped by other labellers, including by other experts, using a four category ranking system described \[here\](<https://github.com/agroimpacts/labelreview#review-labels>).

Here we compare 1) how well the experts agree on these rankings, and 2) what the ranking statistics revealed about overall label quality.

## Comparing label reviews

At a subset of sites that the expert labellers both reviewed, to assess their agreement on scoring, and what their average rating is.

### Read in and combine reviews

```{r}
#| eval: true

root_dir <- here::here("data/")

# all assignments data so far, to get list of names/classes
assns <- readr::read_csv(file.path(root_dir, "raw/assignments.csv"))
kml_types <- assns %>% 
  select(kml_type, name) %>% 
  distinct()

# Read in label reviews
# dir(pth, full.names = TRUE, pattern = "csv")
reviews <- lapply(
  dir(file.path(root_dir, "raw/reviews"), full.names = TRUE, pattern = "csv"),
  readr::read_csv
)
expert1 <- reviews[[1]]
expert2 <- reviews[[2]]

bind_rows(
  expert1 %>% mutate(expert = 1), 
  expert2 %>% mutate(expert = 2)
) %>% 
  left_join(., kml_types, by = "name") %>% 
  mutate(
    score = case_when(
      grepl("pas|Pas", rating) ~ "2", 
      grepl("fail|Fail", rating) ~ "0", 
      grepl("Marginal|marginal", rating) ~ "1",
      grepl("^The mapper has correct", rating) ~ "2",
      grepl("^The expert.*.wrong", rating) ~ "0",
      rating == "missing" & kml_type == "Q" ~ "0",
      grepl("^Correctly", rating) ~ "2",
      grepl("^Labeller did not map", rating) ~ "0",
      TRUE ~ substr(rating, 1, 1)
    )
  ) %>% 
  # drop sites where expert score was assigned (missing) but F
  filter(!(kml_type =="F" & labeller == "expert")) %>%
  mutate(score = as.numeric(score)) %>% 
  filter(!is.na(score)) %>% 
  select(name, kml_type, labeller, expert, score, rating) -> combined_reviews

combined_reviews %>% head(.)
```

### Compare scores

Just for F sites where experts reviewed the same labeller. For one or two the expert reviewed the same labeller/site more than once. Here we take the lower of the two scores.

```{r}
#| eval: true

combined_reviews %>% 
  filter(kml_type == "F") %>% 
  group_by(name) %>% 
  count() %>% 
  ungroup() %>% 
  filter(n > 1) %>% 
  mutate(id = 1:n()) -> common_reviews


# kml_types %>% filter(name %in% common_reviews$name)
combined_reviews %>% 
  right_join(., common_reviews, by = "name") %>% 
  group_by(name, labeller) %>% 
  filter(length(unique(expert)) == 2) %>% 
  ungroup() %>% 
  arrange(name) %>% 
  select(id, name, expert, score) %>% 
  tidyr::pivot_wider(
    names_from = expert, values_from = score, names_prefix = "expert", 
    values_fn = min
  ) %>% arrange(name) %>% 
  mutate(expert1s = ifelse(expert1 %in% 2:4, 1, 0), 
         expert2s = ifelse(expert2 %in% 2:4, 1, 0)) -> contrast_reviews

# contrast_reviews %>% 
irr::agree(contrast_reviews[, c("expert1", "expert2")])
irr::agree(contrast_reviews[, c("expert1s", "expert2s")])

mudiff <- contrast_reviews %>% 
  mutate(score_diff = expert2 - expert1) %>% 
  summarize(mudiff = round(mean(score_diff), 3))
contrast_reviews %>% 
  mutate(score_diff = expert2 - expert1) %>% 
  ggplot() + geom_histogram(aes(x = score_diff), bins = 20) + 
  ggtitle(glue::glue("Mean score difference = {mudiff}")) + 
  theme_linedraw()

# assns %>% filter(name == "ML2303293") %>% View()
# assns %>% 
#   filter(kml_type == "F") %>% 
#   group_by(name) %>% 
#   count() %>% 
#   ungroup() %>%
#   pull(n) %>% table(.)
```

## Overall sites assessed

```{r}
#| eval: true

combined_reviews %>% 
  group_by(name, kml_type) %>% 
  count() %>% rename(nreviews = n) %>% 
  group_by(kml_type, nreviews) %>% 
  count()

combined_reviews %>% 
  distinct(kml_type, name) %>% 
  group_by(kml_type) %>% count() %>% 
  kable()
```

### Scores per labeller

#### Mean scores

```{r}
#| eval: true

combined_reviews %>% 
  mutate(expert = as.character(expert)) %>% 
  group_by(kml_type) %>%
  summarize(score = mean(score))
  
mean_scores <- combined_reviews %>% 
  mutate(expert = as.character(expert)) %>% 
  group_by(labeller, expert) %>% 
  summarize(score = mean(score), ct = n()) %>% 
  ungroup() 

ggplot(mean_scores) +
  geom_bar(
    aes(x = reorder(labeller, score), y = score, fill = expert), 
    stat = "identity", position = "dodge"
  ) + 
  geom_text(
    aes(x = reorder(labeller, score), y = score, label = ct, 
        color = expert, angle = 90), 
    nudge_x = c(-0.3, 0.3), nudge_y = 0.1, size = 3.5
  ) + 
  xlab("Labeller") + 
  theme_linedraw() + 
  theme(axis.text.x = element_text(angle = 90))

```

#### Score distributions

```{r}
#| eval: true
#| warning: false
#| message: false

combined_reviews %>% 
  filter(labeller != "expert") %>% 
  mutate(expert = as.character(expert)) %>% 
  ggplot() + 
  geom_histogram(aes(x = score, fill = expert), position = "dodge", bins = 4) + 
  facet_wrap(~labeller, nrow = 3) + 
  theme_linedraw() + theme(legend.position = "bottom")

```

Expert 1

```{r}
#| eval: true
#| warning: false
#| message: false


for(i in 1:2) {
  p <- combined_reviews %>% 
    filter(labeller != "expert") %>%
    filter(expert == i) %>% 
    ggplot() + 
    geom_histogram(aes(x = score), bins = 4, fill = c("#F8766D", "#619CFF")[i], 
                   color = "grey") + 
    facet_wrap(~labeller, nrow = 3) + 
    ggtitle(paste("Expert", i))
    theme_linedraw() + theme(legend.position = "bottom")
  print(p)
}

```

## Passing scores

### Proportion of passing scores

```{r}
#| eval: true
#| warning: false
#| message: false

passing <- combined_reviews %>% 
  filter(kml_type == "F") %>% 
  mutate(score2 = ifelse(score %in% 2:4, 1, 0)) %>% 
  summarize(prop = sum(score2) / length(score2), npass = sum(score2))

paste("Proportion of passing Class 2 labels =", round(passing$prop, 2))
paste("Number of passing Class 2 labels =", round(passing$npass, 2))
```

### Spatial distribution of scores

```{r}
#| eval: true
#| warning: false
#| message: false

mgrid <- readr::read_csv(file.path(root_dir, "raw/maingrid.csv"))

world <- geodata::world(file.path(root_dir, "external"), level = 0, resolution = 3)
iso3 <- geodata::country_codes() %>% 
  filter(continent == "Africa" & SOVEREIGN != "France") %>% 
  pull(ISO3)

# iso3[!iso3 %in% c("MRT", "MYT", "STP", "SHN", "REU", "SYC")]
drop_countries <- c("CPV", "MDG", "MYT", "STP", "SHN", "REU", "SYC", "MUS")
africa <- st_as_sf(world) %>% filter(GID_0 %in% iso3[!iso3 %in% drop_countries])

combined_reviews_sf <- combined_reviews %>% 
  mutate(score2 = ifelse(score %in% 2:4, 1, 0)) %>% 
  select(-rating) %>% 
  left_join(., mgrid %>% select(name, x, y)) %>% 
  st_as_sf(coords = c("x", "y"), crs = 4326)
```

```{r}
#| eval: true
#| warning: false
#| message: false

m <- ggplot(africa) + geom_sf()
gd <- function(x) {
  guides(colour = guide_legend(override.aes = list(size = 2), title = x))
}
thm <- theme_void() + theme(legend.position = "bottom")
lyr <- function(x) {
  geom_sf(data = combined_reviews_sf, aes(color = factor(get(x))), size = 0.05)
}

p <- m + lyr("score") + gd("Score") + thm
p2 <- m + lyr("score2") + gd("") + thm

p + p2
```

## Outputs

Save out to disk for data integration and further analysis

```{r}
#| eval: true
#| warning: false
#| message: false

combined_reviews_sf %>% as_tibble() %>% 
  readr::write_csv(file.path(root_dir, "interim/combined-expert-review.csv"))

```
